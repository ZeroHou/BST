实现简单的二叉搜索树(BST)

结构体Node：左结点left、右结点right、数据data
类BST：根结点root

主要功能有：添加、删除、查询、遍历(前序遍历、中序遍历、后序遍历、层序遍历、深度优先搜索、广度优先搜索)、高度计算

时间复杂度：
1、添加
时间复杂度为O(logn)
2、删除
时间复杂度为O(logn)

简单描述一下二叉搜索树的删除过程，可以分为以下四种情况
a) 要删除的节点没有左右孩子
b) 要删除的节点只有左孩子（用左子结点代替）
c) 要删除的节点只有右孩子（用右子结点代替）
d) 要删除的节点有左右孩子（用后继结点代替）

我这里不直接用后继结点替代被删除结点，而是根据左右两颗子树高度，选择前继结点或者后继结点，有可能降低树的高度
因此只有两种情况：
a) 要删除的节点没有左右孩子
b) 要删除的节点有孩子(根据左右两颗子树高度，选择前继结点或者后继结点)

3、查询
时间复杂度为O(logn)
4、遍历
遍历全结点，时间复杂度为O(n)
5、高度计算
遍历全结点，时间复杂度为O(n)

总结：
1、二叉树算法的核心是递归，实现二叉树的任何功能都可通过递归实现
2、前序遍历是dfs的一种
3、BFS就是层序遍历，可以用队列的特点来实现
4、中序遍历是二叉搜索树结点从小到大排序
5、高度计算可以用前序遍历来实现
6、递归处理每个分支的一半，跟二分法类似，属于减治法或者分治法，用分治法的主定理来算T(n)=aT(n/b)+f(n)，f(n)∈O(n^d)，这里a=1，b=2，d=0，a=b^d，因此T(n)∈O(n^d*logn)=O(logn)
