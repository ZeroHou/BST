实现简单的二叉搜索树(BST)

结构体Node：左结点left、右结点right、数据data
类BST：根结点root

主要功能有：添加、删除、查询、遍历(前序遍历、中序遍历、后序遍历、层序遍历、深度优先搜索、广度优先搜索)、高度计算

时间复杂度：
1、添加
时间复杂度为O(logn)
2、删除
时间复杂度为O(logn)+O(n)=O(n)（先找到结点(O(logn))，再把结点子树的每一个结点重新插入到树里(O(n))）
还有一种时间复杂度是O(logn)的做法，就是直接让子树某一结点取代被删除结点。
3、查询
时间复杂度为O(logn)
4、遍历
遍历全结点，时间复杂度为O(n)
5、高度计算
遍历全结点，时间复杂度为O(n)

总结：
1、二叉树算法的核心是递归，实现二叉树的任何功能都可通过递归实现
2、前序遍历是dfs的一种
3、BFS就是层序遍历，可以用队列的特点来实现
4、中序遍历是二叉搜索树结点从小到大排序
5、高度计算可以用前序遍历来实现
6、递归处理每个分支的一半，跟二分法类似，属于减治法或者分治法，用分治法的主定理来算T(n)=aT(n/b)+f(n)，f(n)∈O(n^d)，这里a=1，b=2，d=0，a=b^d，因此T(n)∈O(n^d*logn)=O(logn)
